name: Release

# TODO(p2): Restore worfklow_dispatch trigger
on:
  push:
    branches:
      - release/v*
      - releases
    paths:
      - build/version.go
  pull_request:
    branches:
      - release/v*
      - releases
    paths:
      - build/version.go

defaults:
  run:
    shell: bash

permissions:
  contents: read

jobs:
  check:
    name: Check which projects need to be built
    runs-on: ubuntu-latest
    outputs:
      projects: ${{ steps.projects.outputs.projects }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: projects
        env:
          TARGET_REF: ${{ github.base_ref || github.ref }}
        run: |
          projects=()
          for project in node miner; do
            echo "project=$project"
            current_version=$(go run cmd/release/main.go --json $project version | jq -r .msg)
            echo "${project}_current_version=$current_version"
            if [[ $current_version =~ -dev$ ]]; then
              echo "Skipping $project because it's a dev version"
              continue
            fi
            if [[ $current_version =~ -rc$ && "$TARGET_REF" == 'refs/heads/releases' ]]; then
              echo "Skipping $project because it's an RC version on the releases branch"
              continue
            fi
            if [[ "$project" == "node" ]]; then
              current_version_exists=(git tag -l 'v*' | grep -q $current_version)
            else
              current_version_exists=(git tag -l '$project/v*' | grep -q $current_version)
            fi
            echo "${project}_current_version_exists=$current_version_exists"
            if [[ ! $current_version_exists ]]; then
              projects+=($project)
            fi
          done
          echo "projects=$(echo "${projects[@]}" | jq -c .)" | tee -a $GITHUB_OUTPUT
  build:
    needs: [check]
    if: needs.check.outputs.projects != '[]'
    name: Build ${{ matrix.project }} (${{ matrix.os }}/${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.check.outputs.projects) }}
        include:
          - runner: ubuntu-latest
            os: Linux
            arch: X64
          - runner: macos-13
            os: macOS
            arch: X64
          - runner: macos-14
            os: macOS
            arch: ARM64
    steps:
      - env:
          OS: ${{ matrix.os }}
          ARCH: ${{ matrix.arch }}
        run: |
          if [[ "$OS" != "$RUNNER_OS" || "$ARCH" != "$RUNNER_ARCH" ]]; then
            echo "::error title=Unexpected Runner::Expected $OS/$ARCH, got $RUNNER_OS/$RUNNER_ARCH"
            exit 1
          fi
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
      - uses: ./.github/actions/install-system-dependencies
      - uses: ./.github/actions/install-go
      - env:
          GITHUB_TOKEN: ${{ github.token }}
        run: make deps
      - if: matrix.project == 'node'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: make lotus
      - if: matrix.project == 'miner'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: make lotus-miner lotus-worker
      - if: matrix.project == 'lotus' && runner.os == 'macOS'
        run: otool -hv lotus
      - uses: actions/upload-artifact@v4
        with:
          name: lotus-${{ matrix.project }}-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            lotus/lotus
            lotus/lotus-miner
            lotus/lotus-worker
  release:
    needs: [check, build]
    if: needs.check.outputs.projects != '[]'
    name: Release [publish=${{ github.event_name != 'pull_request' }}]
    permissions:
      # This enables the job to create and/or update GitHub releases
      contents: write
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        project: ${{ fromJSON(needs.check.outputs.projects) }}
    env:
      PUBLISH: ${{ github.event_name != 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0
      - uses: actions/download-artifact@v4
        with:
          name: lotus-${{ matrix.project }}-Linux-X64
          path: linux_amd64_v1
      - uses: actions/download-artifact@v4
        with:
          name: lotus-${{ matrix.project }}-macOS-X64
          path: darwin_amd64_v1
      - uses: actions/download-artifact@v4
        with:
          name: lotus-${{ matrix.project }}-macOS-ARM64
          path: darwin_arm64
      - uses: ./.github/actions/install-go
      - uses: ipfs/download-ipfs-distribution-action@v1
        with:
          name: kubo
          version: v0.16.0
      - id: meta
        run: |
          version="$(go run cmd/release/main.go --json ${{ matrix.project }} version | jq -r .msg)"
          if [[ "${{ matrix.project}}" == "miner" ]]; then
            tag="miner/$version"
            latest="$(git tag -l 'miner/v*' | sort -V | tail -n1)"
          elif [[ "${{ matrix.project}}" == "node" ]]; then
            tag="$version"
            latest="$(git tag -l 'v*' | sort -V | tail -n1)"
          else
            echo "::error title=Unknown Project::${{ matrix.project }}"
            exit 1
          fi
          latest="$(echo -e "$latest\n$version" | sort -V | tail -n1)"
          echo "version=$version" | tee -a $GITHUB_OUTPUT
          echo "latest=$latest" | tee -a $GITHUB_OUTPUT
          echo "tag=$tag" | tee -a $GITHUB_OUTPUT
      - env:
          expected: ${{ steps.meta.outputs.version }}
        run: |
          for dir in linux_amd64_v1 darwin_amd64_v1 darwin_arm64; do
            for bin in lotus lotus-miner lotus-worker; do
              if [[ -f $dir/$bin ]]; then
                actual=$(./$dir/$bin --version)
                if [[ "$actual" != "$expected" ]]; then
                  echo "::error title=Version Mismatch::Expected $expected, got $actual ($dir/$bin)"
                  exit 1
                fi
              fi
            done
          done
      - uses: goreleaser/goreleaser-action@7ec5c2b0c6cdda6e8bbb49444bc797dd33d74dd8 # v5.0.0
        with:
          distribution: goreleaser-pro
          version: 2.0.1
          args: release --clean ${{ env.PUBLISH == 'false' && '--snapshot' || '' }}
        env:
          GITHUB_TOKEN: ${{ env.PUBLISH == 'true' && secrets.GORELEASER_GITUB_TOKEN || github.token || '' }}
          GORELEASER_KEY: ${{ env.PUBLISH == 'true' && secrets.GORELEASER_KEY || '' }}
          TAG: ${{ steps.meta.outputs.tag }}
          VERSION: ${{ steps.meta.outputs.version }}
          IS_LATEST: ${{ steps.meta.outputs.latest == steps.meta.outputs.version }}
          IS_DRAFT: ${{ github.event_name == 'pull_request' }}
          TARGET_COMMITISH: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || github.sha }}
          HEADER: '' # TODO(p3): Extract release notes from CHANGELOG.md
      - run: |
          ./scripts/generate-checksums.sh
      - if: env.PUBLISH == 'true'
        env:
          GITHUB_TOKEN: ${{ github.token }}
          TAG: ${{ steps.meta.outputs.tag }}
        run: |
          ./scripts/publish-checksums.sh
